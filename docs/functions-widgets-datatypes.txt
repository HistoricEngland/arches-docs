########################################################################
Creating Custom Components
########################################################################

***********************
About Custom Components
***********************

`Functions`_, `Widgets`_, `Card Components`_, `DataTypes`_, and `Plugins` have
overlapping functionality and architecture. These constructs are used
to add extra functionality to Arches upon data entry or data
visualization.

At a high level, if you're trying to add a custom interface for
entering business data, you'll use a Widget. If you need to enter and
display a type of data unknown to Arches, you'll need a new DataType
to go with your Widget. If you need sophisticated side effects or to
perform additional computation based on the data entered, it's time
for a Function.



.. note::

   To develop these components, you'll need familiarity with Django
   templates, intermediate skills in the Python programming language,
   and some basic familiarity with the Knockout.js front-end framework.


*********
Functions
*********

Functions are the most powerful extension to Arches. Functions
associated with a Resource are called during various CRUD operations,
and have access to any server-side model. Proficient Python/Django
developers will find few limitations extending an Arches Project with
Functions.

Function must be created, registered, and then associated with a
Resource Model.

Creating a Function
===================

A Function comprises three separate files, which should be seen as
front-end/back-end complements. On the front-end, you will need a
component made from a Django HTML template and JavaScript pair, which
should share the same basename.

In your Project, these files must be placed like so:

    ``/myproject/myproject/media/js/views/components/functions/spatial_join.js``
    ``/myproject/myproject/templates/views/components/functions/spatial_join.htm``

The third file is a Python file which contains a dictionary telling
Arches some important details about your Function, as well as its main
logic.

    ``/myproject/myproject/functions/spatial_join.py``

.. note::

   As in the example above, its advisable that all of your files share
   the same basename. (If your Function is moved into a Package, this
   is necessary.) A new Project should have an example function in it
   whose files you can copy to begin this process.


Defining the Function's Details
===============================

The first step in creating a function is defining the ``details`` that
are in the top of your Function's ``.py`` file.

.. code-block:: python

    details = {
        'name': 'Sample Function',
        'type': 'node',
        'description': 'Just a sample demonstrating node group selection',
        'defaultconfig': {"selected_nodegroup":""},
        'classname': 'SampleFunction',
        'component': 'views/components/functions/sample-function'
    }



:name: **Required** Name is used to unregister a function, and shows up
       in the ``fn list`` command.
:type: **Required**  As of version 4.2, this should always be set to ``node``
:description: **Optional**  Add a description of what your Function does.
:defaultconfig: **Required** A JSON object with any configuration needed to
                serve your function's logic
:classname: **Required** The name of the python class that holds this
            Function's logic.
:component: **Required** Canonical path to html/js component.


More about the ``defaultconfig`` field
--------------------------------------

Any configuration information you need your Function to access can be
stored here. If your function needs to calculate something based on
the value of an existing Node, you can refer to it here. Or, if you
want your Function to e-mail an administrator whenever a specific node
is changed, both the Node ID and the email address to be used are good
candidates for storage in the ``defaultconfig`` dictionary.

The ``defaultconfig`` field serves both as a default, and as your
user-defined schema for your function's configuration data. Your
front-end component for the function will likely collect some of this
configuration data from the user and store it in the ``config``
attribute of the pertinent ``FunctionXGraph``.


Writing your Function Logic
===========================

In your Function's Python code, you have access to all your
server-side models. You're basically able to extend Arches in any way
you please. You may want to review the :ref:`Data Model`
documentation.


Function Hooks
==============

Your function needs to extend the ``BaseFunction`` class. Depending on
what you are trying to do, you will need to implement the ``get``,
``save``, ``delete``, ``on_import``, and/or ``after_function_save``
methods.

.. code-block:: python

    class MyFunction(BaseFunction):

        def get(self):
            raise NotImplementedError

        def save(self, tile, request):
            raise NotImplementedError

        def delete(self, tile, request):
            raise NotImplementedError

        def on_import(self, tile):
            raise NotImplementedError

        def after_function_save(self, functionxgraph, request):
            raise NotImplementedError

.. note::

   Not all of these methods are called in the current Arches
   software. You can also leave any of them unimplemented, and the
   ``BaseFunction`` class will raise a ``NotImplementedError`` for
   you. Arches is designed to gracefully ignore these exceptions for
   functions.

   A detailed description of current functionality is below.


``save`` and ``delete``
-----------------------

The ``Tile`` object will look up all its Graph's associated Functions
upon being saved. Before writing to the database, it calls each
function's ``save`` method, passing itself along with the Django
``Request`` object. This is likely where the bulk of your function's
logic will reside.

The ``Tile`` object similarly calls each of its graph's
functions' ``delete`` methods with the same parameters. Here, you can
execute any cleanup or other desired side effects of a Tile's
deletion. Your ``delete`` implementation will have the same signature
as ``save``.


``after_function_save``
-----------------------

The Graph view passes a FunctionXGraph object to
``after_function_save``, along with the request.


The FunctionXGraph object has a ``config`` attribute which stores that
instance's version of the ``defaultconfig`` dictionary. This is a good
opportunity, for example, to programmatically manipulate the
Function's configuration based on the Graph or any other server-side
object.

You can also write any general logic that you'd like to fire upon the
assignment of a Function to a Resource.

``on_import``
-------------

The import module calls on_import if the file format is a
JSON-formatted Arches file, and passes an associated Tile object.

CSV imports do not call this hook.

The UI Component
================
Having implemented your function's logic, it's time to develop the
front-end components required to associate it with Resources and
provide any configuration data.

The component you develop here will be rendered in the Resource
Manager when you associate the function with a Resource, and this is
where you'll put any forms or other UI artifacts used to configure the
Function.

Developing your Function's UI component is very similar to developing
`Widgets`_. More specific guidelines are in progress, but for now,
refer to the sample code in your project's
``templates/views/components/functions/`` directory, and gain a little
more insight from the ``templates/views/components/widgets/``
directory. The complementary JavaScript examples will be located in
``media/js/views/components/functions/`` and
``media/js/views/components/widgets`` directories.


Registering Functions
=====================

First, list the names of functions you already have registered:

    ``(ENV)$ python manage.py fn list``

Now you can register your new function with

    ``(ENV)$ python manage.py fn register --source <path to your function's .py file>``

For example:

.. code-block:: bash

    (ENV)$ python manage.py fn register --source /Documents/projects/mynewproject/mynewproject/functions/sample_function.py


Now navigate to the Function Manager in the Arches Designer to confirm
that your new function is there and functional. If it's not, you may
want to unregister your function, make additional changes, and
re-register it. To unregister your function, simply run

.. code-block:: bash

    (ENV)$ python manage.py fn unregister --name 'Sample Function'

All commands are listed in :ref:`Command Line Reference - Function Commands <function commands>`.

*******
Widgets
*******

Widgets allow you to customize how data of a certain DataType is
entered into Arches, and further customize how that data is presented
in Reports. You might have several Widgets for a given DataType,
depending on how you want the Report to look or to match the context
of a certain Resource.

Widgets are primarily a UI artifact, though they are closely tied to
their underlying DataType.

To develop a custom Widget, you'll need to write three separate files,
and place them in the appropriate directories. For the appearance and
behavior of the Widget, you'll need a component made of a Django
template and JavaScript file placed like so:

    ``project_name/templates/views/components/widgets/sample-widget.htm``
    ``project_name/media/js/views/components/widgets/sample-widget.js``

To register and configure the Widget, you'll need a JSON configuration
file:

    ``project_name/widgets/sample-widget.json``


Configuring your Widget
=======================

To start, here is a sample Widget JSON file:

.. literalinclude:: examples/sample-widget.json
   :language: json

The most important field here is the ``datatype`` field. This controls
where your Widget will appear in the Arches Resource Designer. Nodes
each have a DataType, and Widgets matching that DataType will be
available when you're designing your Cards. The value must match an
existing DataType within Arches.

You can also populate the ``defaultconfig`` field with any
configuration data you wish, to be used in your Widget's front-end
component.

Designing Your Widget
=====================

Your Widget's template needs to include three Django template "blocks"
for rendering the Widget in different contexts within Arches. These
blocks are called **form**, **config_form**, and **report**. As you might
guess from their names, **form** is rendered when your Widget appears on
a Card for business data entry, **config_form** is rendered when you
configure the Widget on a card when designing a Resource, and **report**
controls how data from your Widget is presented in a Report.

Here is an example:

.. literalinclude:: examples/sample-widget.htm
   :language: htmldjango

To pull it all together, you'll need to write a complementary
JavaScript file. The Arches UI uses Knockout.js, and the best way to
develop your Widget in a compatible way is to write a Knockout
component with a ``viewModel`` corresponding to your Widget's ``view``
(the Django template).

Here is an example, continuing with our ``sample-widget``:

.. literalinclude:: examples/sample-widget.js
   :language: JavaScript

Registering your Widget
=======================

After placing your Django template and JavaScript files in their
respective directories, you are now ready to register your Widget:


.. code-block:: bash

    python manage.py widget register --source /Documents/projects/mynewproject/mynewproject/widgets/sample-widget.json

The command will confirm your Widget has been registered, and you can
also see it with:

.. code-block:: bash

    python manage.py widget list

If you make an update to your Widget, you can load the changes to
Arches with:


.. code-block:: bash

    python manage.py widget update --source /Documents/projects/mynewproject/mynewproject/widgets/sample-widget.json

All the Widget commands are detailed in :ref:`Command Line Reference - Widget Commands <widget commands>`.



*********
DataTypes
*********

A DataType defines a type of business data. DataTypes are associated
with Nodes and Widgets. When you are designing your Cards, the Widgets
with the same DataType as the Node you are collecting data for will be
available. In your Branches, each Node with a DataType will honor the
DataType configuration you specify when you create it.

The simplest (non-configurable, non-searchable) DataTypes consist of a
single Python file. If you want to provide Node-specific configuration
to your DataType (such as whether to expose a Node with that DataType
to Advanced Search or how the data is rendered), you'll also develop a
UI component comprising a Django template and JavaScript file.

In your Project, these files must be placed accordingly:

    Optional Configuration Component:

    ``/myproject/myproject/media/js/views/components/datatypes/sample_datatype.js``
    ``/myproject/myproject/templates/views/components/datatypes/sample_datatype.htm``

    DataType File:

    ``/myproject/myproject/datatypes/sample_datatype.py``


To begin, let's examine the ``sample-datatype`` included with Arches:


.. literalinclude:: examples/sample_datatype.py
   :language: python
   :linenos:


Writing Your DataType
=====================

Your DataType needs, at minimum, to implement the ``validate``
method. You're also likely to implement the
``transform_import_values`` or ``transform_export_values``
methods. Depending on whether your DataType is spatial, you may need
to implement some other methods as well. If you want to expose Nodes
of your DataType to Advanced Search, you'll also need to implement the
``append_search_filters`` method.

You can get a pretty good idea of what methods you need to implement
by looking at the ``BaseDataType`` class in the Arches source code
located at ``arches/app/datatypes/base.py`` and below:

.. literalinclude:: examples/base.py
   :language: python
   :linenos:

the ``validate`` method
-----------------------

Here, you write logic that the Tile model will use to accept or reject
a Node's data before saving. This is the core implementation of what
your DataType is and is not.

The ``validate`` method returns an array of errors. If the array is
empty, the data is considered valid. You can populate the errors array
with any number of dictionaries with a ``type`` key and a ``message``
key. The value for ``type`` will generally be ``ERROR``, but you can
provide other kinds of messages.

the ``append_search_filters`` method
------------------------------------

In this method, you'll create an ElasticSearch query Nodes matching
this datatype based on input from the user in the Advanced Search
screen. (You design this input form in your DataType's front-end
component.)

Arches has its own ElasticSearch query `DSL builder class
<https://github.com/archesproject/arches/blob/master/arches/app/search/elasticsearch_dsl_builder.py>`_.
You'll want to review that code for an idea of what to do. The search
view passes your DataType a Bool() query from this class, which you
call directly. You can invoke its ``must``, ``filter``, ``should``, or
``must-not`` methods and pass complex queries you build with the DSL
builder's ``Match`` class or similar. You'll execute this search
directly in your ``append_search_filters`` method.

In-depth documentation of this part is planned, but for now, look at
the `core datatypes
<https://github.com/archesproject/arches/blob/master/arches/app/datatypes/datatypes.py>`_
located in Arches' source code for examples of the approaches you can
take here.

.. note::

   If you're an accomplished Django developer, it should also be
   possible to use Elastic's own `Python DSL builder
   <https://github.com/elastic/elasticsearch-dsl-py>`_ in your Project
   to build the complex search logic you'll pass to Arches' ``Bool()``
   search, but this has not been tested.

Configuring your DataType
=========================
You'll need to populate the ``details`` dictionary to configure your
new DataType.

.. literalinclude:: examples/sample_datatype.py
   :language: python
   :lines: 7-17

:datatype:
        **Required** The name of your datatype. The convention in
        Arches is to use *kebab-case* here.
:iconclass:
        **Required** The FontAwesome icon class your DataType should
        use. Browse them `here
        <https://fontawesome.com/icons?d=gallery>`_.
:modulename:
        **Required** This should always be set to ``datatypes.py``
        unless you've developed your own Python module to hold your
        many DataTypes, in which case you'll know what to put here.
:classname:
        **Required** The name of the Python class implementing your
        datatype, located in your DataType's Python file below these
        details.
:defaultwidget:
        **Required** The default Widget to be used for this DataType.
:defaultconfig:
        **Optional** You can provide user-defined default
        configuration here.
:configcomponent:
        **Optional** If you develop a configuration component, put the
        fully-qualified name of the view here. Example:
        ``views/components/datatypes/sample-datatype``
:configname:
        **Optional** The name of the Knockout component you have
        registered in your UI component's JavaScript file.
:isgeometric:
        **Required** Used by the Arches UI to determine whether to
        create a Map Layer based on the DataType, and also for
        caching. If you're developing such a DataType, set this to
        True.
:issearchable:
        **Optional** Determines if the datatype participates in advanced search.
        The default is false.

.. important::

   ``configcomponent`` and ``configname`` are required together.

Developing the Configuration Component
======================================

Your component JavaScript file should register a Knockout component
with your DataType's ``configname``. This component should be an
object with two keys: ``viewModel``, and ``template``

The value for ``viewModel`` should be a function where you put the
logic for your template. You'll be setting up Knockout observable and
computed values tied to any form elements you've developed to collect
Advanced Search or Node-level configuration information from the user.

The value for ``template`` should be another object with the key
``require``, and the value should be
``text!datatype-config-templates/<your-datatype-name>``. Arches will
know what to do with this -- it comes from the value you supplied in
your Python file's ``details`` dictionary for ``configcomponent``.

Pulling it all together, here's the JavaScript portion of Arches'
``date`` DataType.

.. literalinclude:: examples/date.js
   :language: javascript


Advanced Search Rendering
-------------------------

If you're supporting Advanced Search functionality for Nodes with your
DataType, your Django template will include a ``search`` block,
conditionally rendered by Knockout.js if the search view is
active. Here's the one from the ``boolean`` datatype:


.. literalinclude:: examples/boolean.htm
   :language: htmldjango
   :lines: 2-10

Note the ``<!-- ko if: $data.search -->`` directive opening and
closing the search block. This is not an HTML comment -- it's
Knockout.js-flavored markup for the conditional rendering.

Arches' built-in ``date`` DataType does not use the Django template
``block`` directive, but only implements advanced search, and contains
a more sophisticated example of the component logic needed:


.. literalinclude:: examples/date.htm
   :language: django


Node-specific Configuration
---------------------------

This section of your template should be enclosed in Knockout-flavored
markup something like: ``<!-- ko if: $data.graph -->``, and in your
Knockout function you should follow the convention and end up with
something like ``if (this.graph) {``

Here, you put form elements corresponding to any configuration you've
implemented in your DataType. These should correspond to keys in your
DataType's ``defaultconfig``.

Arches' ``boolean`` DataType has the following ``defaultconfig``:

.. code-block:: python

   {'falseLabel': 'No', 'trueLabel': 'Yes'}

You can see the corresponding data bindings in the Django template:

.. literalinclude:: examples/boolean.htm
   :language: htmldjango
   :lines: 12-25

And finally, here is the ``boolean`` DataType's JavaScript file in its entirety:

.. literalinclude:: examples/boolean.js
   :language: javascript

Registering your DataType
=========================

These commands are identical to working with Widgets, but you use the
word ``datatype`` instead. Please refer to :ref:`Command Line Reference - Widget Commands <widget commands>`.


***************
Card Components
***************

Beginning in Arches 4.3, Cards are rendered using Card Components,
allowing them to be composed and nested arbitrarily in various
contexts within the Arches UI. Arches comes with a default Card
Component that should suit most needs, but you can also create and
register custom Card Components to extend the front-end behavior of
Arches.


.. note:

   A Card Component is not a component of a card -- it is a
   Knockout.js component used to render a Card. Each Card Component is
   a UI representation of a card and contains Widgets, etc.


Developing Card Components is very similar to developing Widgets. A
Card Component consists of a Django template and Knockout.js
JavaScript file. To register your component, you'll also need a JSON
file specifying its initial configuration.

To develop your new card, you'll place files like so in your project:


    ``project_name/templates/views/components/cards/my-new-card.htm``
    ``project_name/media/js/views/components/cards/my-new-card.js``

To register and configure the Component, you'll need a JSON configuration
file:

    ``project_name/cards/my-new-card.json``


Creating a Card Component
=========================

The default template and Knockout files illustrate everything a Card
Component needs, and you'll be extending this functionality. Your
template will provide conditional markup for various contexts
('editor-tree', 'designer-tree', 'permissions-tree', 'form', and
'report'), render all the card's Widgets, and display other
information.


Here's the template for the default Card Component:

.. literalinclude:: examples/default-card.htm
   :language: htmldjango


And here's the Knockout file:

.. literalinclude:: examples/default-card.js
   :language: javascript



Registering your Card Component
===============================

To register your Component, you'll need a JSON configuration file
looking a lot like this sample:


.. literalinclude:: examples/new-card-component.json
   :language: json

:componentid:
        **Optional** A UUID4 for your Component. Feel free to generate
        one in advance if that fits your workflow; if not, Arches will
        generate one for you and print it to STDOUT when you register
        the Component.
:name:
        **Required** The name of your new Card Component, visible in
        the drop-down list of card components in the Arches Designer.
:description:
        **Required** A brief description of your component.
:component:
        **Required** The path to the component view you have
        developed. Example: ``views/components/cards/sample-datatype``
:componentname:
        **Required** Set this to the last part of `component` above.
:defaultconfig:
        **Required** You can provide user-defined default
        configuration here. Make it a JSON dictionary of keys and
        values. An empty dictionary is acceptable.



Card Commands
-------------

To register your Card Component, use this command:

.. code-block:: bash

    python manage.py card_component register --source /Documents/projects/mynewproject/mynewproject/cards/new-card-component.json

The command will confirm your Component has been registered, and you can
also see it with:

.. code-block:: bash

    python manage.py card_component list

If you make an update to your Card Component, you can load the changes to
Arches with:


.. code-block:: bash

    python manage.py card_component update --source /Documents/projects/mynewproject/mynewproject/cards/new-card-component.json

All the Card Component commands are detailed in :ref:`Command Line Reference - Card Component Commands <card component commands>`.


*******
Plugins
*******

Plugins allow a developer to create an independent page in Arches that is accessible from the main navigation menu.
For example, you may need a customized way of visualize your resource data. A plugin would enable you to design such an interface.
Plugins, like widgets and card components rely only on front-end code. Ajax queries, generally calls to the API, must be used to access any server side data.

Registering your Plugin
===============================

To register your Plugin, you'll need a JSON configuration file
looking a lot like this sample:


.. literalinclude:: examples/sample-plugin.json
   :language: json


:pluginid:
        **Optional** A UUID4 for your Plugin. Feel free to generate
        one in advance if that fits your workflow; if not, Arches will
        generate one for you and print it to STDOUT when you register
        the Plugin.
:name:
        **Required** The name of your new Plugin, visible when a user hovers over the main navigation menu
:icon:
        **Required** The icon visible in the main navigation menu.
:component:
        **Required** The path to the component view you have
        developed. Example: ``views/components/plugins/sample-plugin``
:componentname:
        **Required** Set this to the last part of `component` above.
:config:
        **Required** You can provide user-defined default
        configuration here. Make it a JSON dictionary of keys and
        values. An empty dictionary is acceptable.
:slug: **Required** The string that will be used in the url to access your plugin
:sortorder: **Required** The order in which your plugin will be listed if there are multiple plugins


Plugin Commands
---------------

To register your Plugin, use this command:

.. code-block:: bash

    python manage.py plugin register --source /Documents/projects/mynewproject/mynewproject/plugins/sample-plugin.json

The command will confirm your Plugin has been registered, and you can
also see it with:

.. code-block:: bash

    python manage.py plugin list

If you make an update to your Plugin, you can load the changes to
Arches with:


.. code-block:: bash

    python manage.py plugin update --source /Documents/projects/mynewproject/mynewproject/plugins/sample-plugin.json

**************
Search Filters
**************

https://github.com/archesproject/arches-docs/issues/222
