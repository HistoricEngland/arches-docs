###########################
Changing the Admin Password
###########################

The first item of business when preparing your production of Arches is to change the Admin user's password. You cannot change the Admin user's password in the Arches UI because the Admin account is not associated with an email. Instead you'll need to use the Django admin page:

1. Login as admin to Arches or in the Django admin (``http://localhost:8000/admin/``)
2. Navigate to the Django admin user page ``http://localhost:8000/admin/auth/user/``.
3. In the upper right of the page select ``CHANGE PASSWORD`` and follow the steps to update the password.

.. image:: images/change-admin-pwd.png

###################################
Full Explanation of System Settings
###################################

These are the settings found at ``http://localhost:8000/settings``.

System Settings
----------------

*Default Application Settings*

+ **Application Name** - Name of your Arches app, to be displayed in the browser title bar and elsewhere.
+ **Default Data Import/Export User** - Name to associate with data that is imported into the system.

*Web Analytics*

If you have made a Google Analytics Key to track your app's traffic, enter it here.

*Thesaurus Service Providers*

Advanced users may create more SPAQRL endpoints and register them here. These endpoints will be available in the RDM and allow you to import thesaurus entries from external sources.

Map Settings
-------------

*Mapbox API*

Arches uses the Mapbox mapping library for map display and data creation. Arches also supports Mapbox basemaps and other services.

+ **Mapbox API Key (Optional)** - By default, Arches uses some basemap web services from Mapbox. You will need to `create a free API key <"https://www.mapbox.com/help/create-api-access-token/">`_ (or "access token") for these services to be activated. Alternatively, you could remove all of the default basemaps and add your own, non-Mapbox layers.
+ **Mapbox Sprites** - Path to Mapbox sprites (use default).
+ **Mapbox Glyphs** - Path to Mapbox glyphs (use default).

*Project Extent*

Draw a polygon representing your project's extent. These bounds will serve as the default for the cache seed bounds, search result grid bounds, and map bounds in search, cards, and reports.

*Map Zoom*

You can define the zoom behavior of your maps by specifying max/min and default values. Zoom level 0 shows the whole world (and is the minimum zoom level). Most map services support a maximum of 20 or so zoom levels.

*Search Results Grid*

Arches aggregates search results and displays them as hexagons. You will need to set default parameters for the hexagon size and precision.

.. warning:: A large project area combined with a small hexagon size and/or high precision will take a very long time to load, and can crash your browser. We suggest changing these settings in small increments to find the best combination for your project.

Basic Search Settings
----------------------

Set the default search results behavior. This is also where you will define the max number of resources per export operation.

Temporal Search Settings
------------------------

Arches creates a Time Wheel based on the resources in your database, to allow for quick temporal visualization and queries. A few aspects of this temporal search are defined here.

+ **Color Ramp** - Currently unused (saved for future implementation). The color ramp for the time wheel. For further reference, check out the `d3 API reference <https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md>`_.
+ **Time wheel configuration** - Currently unused (saved for future implementation).  You can, however, modify the time wheel configuration using the advanced settings, :ref:`Time Wheel Configuration`.

Saved Searches
----------------

Arches allows you save a search and present it as convenience for your users. Saved Searches appear as search options in the main Search page. Creating a Saved Search is a three-step process.

#. **Specify Search Criteria** - Go to the Search page and enter all the criteria you would like to use to configure your Saved Search. You may notice that with the addition of each new search filter (either by using the term filter, map filtering tools, or temporal filters) the URL for the page will change.
#. **Copy the URL** - In your browser address bar, copy the *entire* URL. This will be a long string that defines each of the search filters created in step 1.
#. **Create the Saved Search** - Finally, head back to this page and fill out the settings that you see at left. You can also upload an image that will be shown along with your Search Search.

Maintaining UI-Defined Settings
-------------------------------

Because these settings are stored in the database, as opposed to a ``settings.py`` file, if you drop and recreate your database, you will lose them and need to re-enter them by hand. To avoid this, you should run this command *after* you have finished configuring settings through the UI::

    python manage.py packages -o save_system_settings [-d arches/db/system_settings]

A file named "System_Settings.json" will be saved to the directory indicated. If no directory is indicated the file will be saved to settings.SYSTEM_SETTINGS_LOCAL_PATH, which is ``my_project/my_project/system_settings/`` by default. This same path is used to import settings when a new package is loaded into your project.

################################
Registering an OAuth Application
################################

To allow others to connect to your Arches instance, including Arches Collector users, you must create an OAuth client id and add it to your settings.

#. In a browser go to

    .. code-block:: none

        http://<yourdomain:port>/o/applications/

#. Create a new application
#. Fill out the form with a **Name** of your choosing, and set **Client type** and **Authorization grant type** as shown in the image below.

    .. image:: images/oauth-create-client.png

#. Copy the **Client id** and submit the form (you can access this id at any time).
#. In your Arches project's ``settings.py`` or ``settings_local.py`` file, set or add this variable

    .. code-block:: none

        MOBILE_OAUTH_CLIENT_ID = "<your new Client id>"
#. That's all! Arches Collector users will now be able to connect to your Arches instance using their own credentials.

.. important::

    + Only make one application, though you are technically allowed to make more.
    + An application is "owned" by whichever user created it, and will not be visible to other users.


###################
Password Validators
###################

By default, Arches requires that passwords meet the following criteria:

- Have at least one numeric and one alphabetic character
- Contain at least one special character
- Have a minimum length of 9 characters
- Have at least one upper and one lower case character

Admins can change these requirements by configuring the `AUTH_PASSWORD_VALIDATORS`:code: setting in their projects **settings_local.py** file. Below is the default validator setting:

.. code-block:: python

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'arches.app.utils.password_validation.NumericPasswordValidator', #Passwords cannot be entirely numeric
        },
        {
            'NAME': 'arches.app.utils.password_validation.SpecialCharacterValidator', #Passwords must contain special characters
            'OPTIONS': {
                'special_characters': ('!','@','#',')','(','*','&','^','%','$'),
            }
        },
        {
            'NAME': 'arches.app.utils.password_validation.HasNumericCharacterValidator', #Passwords must contain 1 or more numbers
        },
        {
            'NAME': 'arches.app.utils.password_validation.HasUpperAndLowerCaseValidator', #Passwords must contain upper and lower characters
        },
        {
            'NAME': 'arches.app.utils.password_validation.MinLengthValidator', #Passwords must meet minimum length requirement
            'OPTIONS': {
                'min_length': 9,
            }
        },
    ]

To **remove a password validator** in Arches, you can simply remove a validator from the list of `AUTH_PASSWORD_VALIDATORS`:code:.

To modify the list of **required special characters**, simply edit the list of characters in the `special_characters`:code: option in the `SpecialCharacterValidator` validator.

To change the **minimum length of a password**, change the `min_length`:code: property in the `MinLengthValidator`:code: validator.

Advanced users can override or add new validators by creating their own validation classes as explained in `Django's password validation documentation <https://docs.djangoproject.com/en/1.11/topics/auth/passwords/#module-django.contrib.auth.password_validation/>`_.

########################
Time Wheel Configuration
########################

By default Arches will bin your data in the search page time wheel based on your data's temporal distribution. This enables Arches to bin your data efficiently. If your data spans over 1000 years, the bins will be by millennium, half-millennium and century. If your data spans less than a thousand years, your data will be binned by millennium, century, and decade.

You may decide, however, that the bins do not reflect your data very well, and in that case you can manually define your time wheel configuration by editing the TIMEWHEEL_DATE_TIERS setting.

Here is an example of a custom time wheel::

    TIMEWHEEL_DATE_TIERS = {
    "name": "Millennium",
    "interval": 1000,
    "root": True,
    "child": {
            "name": "Century",
            "interval": 100,
            "range": {"min": 1500, "max": 2000},
            "child": {
                "name": "Decade",
                "interval": 10,
                "range": {"min": 1750, "max": 2000}
            }
        }
    }

Each tier, ('Millennium', 'Century', 'Decade' are each tiers) will be reflected as ring in the time wheel.
Properties:

    - "name" - The name that will appear in the description of the selected period
    - "interval" - The number of years in each bin. For example, if your data spans 3000 years, and your interval is 1000, you will get three bins in that tier.
    - "root" - This applies only to the root of the config and should not be modified.
    - "child" - Adding a child will add an additional tier to your time wheel. You can nest as deeply as you like, but the higher the resolution of your time wheel, the longer it will take to generate the wheel.
    - "range" - A range is optional, but including one will restrict the bins to only those within the range.

If you do need to represent decades or years in your time wheel and this impacts performance, you can cache the time wheel for users that may load the search page frequently. To do so, you just need to activate caching for your project.
If you have Memcached running at the following location `127.0.0.1:11211` then the time wheel will automatically be cached for the 'anonymous' user. If not you can update the CACHES setting of your project::

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': os.path.join(APP_ROOT, 'tmp', 'djangocache'),
            'OPTIONS': {
                'MAX_ENTRIES': 1000
            }
        }
    }

This will cache the time wheel to your project's directory. There are other ways to define your cache that you may want to use. You can read more about those options in `Django's cache documentation <https://docs.djangoproject.com/en/1.11/topics/cache/>`_.

By default the time wheel will only be cached for 'anonymous' user for 24 hours. To add other users or to change the cache duration, you will need to modify this setting::

    `CACHE_BY_USER = {'anonymous': 3600  * 24}`

The CACHE_BY_USER keys are user names and their corresponding value is the duration (in seconds) of the cache for that user.
For example, if I wanted to cache the time wheel for the admin user for 5 minutes, I would change the CACHE_BY_USER setting to::

    `CACHE_BY_USER = {'anonymous': 3600  * 24, 'admin': 300}`

##########################
Arches Collector Checklist
##########################

The following steps must be completed to enable an Arches Collector connection
with your Arches instance.

Install CouchDB
---------------

    Arches uses CouchDB 2.x, though the current version of CouchDB is 3.x. If
    you already have 3.x installed, use ``sudo apt-get --purge remove couchdb`` to start
    over. Then:

    .. code-block::

        # only if you haven't already done this
        wget --quiet -O - https://couchdb.apache.org/repo/bintray-pubkey.asc | sudo apt-key add -
        sudo add-apt-repository "deb https://apache.bintray.com/couchdb-deb $(lsb_release -sc) main"
        sudo apt-get update

        # necessary to find the older release
        sudo apt-cache policy couchdb
        sudo apt-get update

    this will list all available versions — make note of the latest version 2
    and then install it:

    .. code-block::

        sudo apt-get install couchdb=2.3.1~bionic

    For the quickest installation configuration, choose `standalone`, `127.0.0.1`, and pick
    your password.

    Test the installation with ``curl http://admin:[your password]@127.0.0.1:5984``,
    the response should contain the correct version number.

    Finally, add this line to ``settings.py`` or ``settings_local.py``:

    .. code-block::

        COUCHDB_URL = 'http://admin:[your password]@127.0.0.1:5984'

    At this point you should be ready to move on, but see the
    `official CouchDB setup documentation <https://docs.couchdb.org/en/stable/setup/index.html>`_
    for more information.

Create an OAuth Application
---------------------------

    Complete the steps in `Registering an OAuth Application`

    This includes copying the Client ID and placing it in your ``settings.py`` or ``settings_local.py`` file.

    .. code-block::

        MOBILE_OAUTH_CLIENT_ID = "<your new Client id>"

Set WSGIPassAuthorization in Apache Conf
----------------------------------------

    If you are using Apache as a webserver, you must add the following line to your VirtualHost:

    .. code-block::

        WSGIPassAuthorization on

Restart Apache for all of these steps to take effect. You should now be able to
use the :ref:`Arches Collector Manager` to create new projects.
